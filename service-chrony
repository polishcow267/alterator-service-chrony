#!/usr/bin/env bash
# Samba active directory provision
# Tool for provision samba active directory
#
# Copyright (C) 2024 Evgenii Sozonov <arzdez@altlinux.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC2034
# shellcheck disable=SC1091
# shellcheck disable=SC2086
# shellcheck disable=SC2317
# shellcheck disable=SC3037

set -euo pipefail

. shell-getopt
. shell-ini-config


PROG_NAME="${0##*/}"
VERSION="0.1"
MODE="provision"
GLOBAL_EXIT=0
input_json=
entryfile=/usr/share/alterator/service/service-chrony.service

OPTIONS_LIST="help,
              version,
              demote,
              provision,
              restore,
              backup,
              status,
              start,
              stop,
              configure"

OPTIONS_SHORT_LIST="h,v,d,p,b,r,s"

TEMP=$(getopt -n "$PROG_NAME" -o "$OPTIONS_SHORT_LIST" -l "$OPTIONS_LIST" -- "$@")
eval set -- "$TEMP"

while :; do
    case "$1" in
        -h|--help)
            show_usage
            ;;
        -v|--version)
            show_version
            ;;
        -d|--demote)
            MODE="demote"
            ;;
        -p|--provision)
            MODE="provision"
            ;;
        -r|--restore)
            MODE="restore"
            ;;
        -b|--backup)
            MODE="backup"
            ;;
        -s|--status)
            MODE="status"
            ;;
        --start)
            MODE="start"
            ;;
        --stop)
            MODE="stop"
            ;;
        --configure)
            MODE="configure"
            ;;
        --) shift; break
            ;;
        *) fatal "Unrecognized option: $1"
            ;;
    esac
    shift
done

validate_json(){
    local input_json="$1"
    local mode_value="$2"
    local retval=0
    local path_to_schema=
    path_to_schema="/usr/share/alterator-service-samba/samba-dc/$mode_value-parameters.schema.json"

    jsonschema "$path_to_schema" <<< $input_json &>/dev/null || retval=1

    return $retval
}

get_json_value() {
    local json="$1"
    local key="$2"
    local path="${3:-.}"
    echo "$json" | jq -r --arg k "$key" "$path.[\$k]" 2>/dev/null
}

backup_config() {
    local config_file="$1"
    local type="$2"
    local retval=0

    mkdir -p /usr/share/alterator-service-chrony/config-backup
    local backup_file=

    backup_file="/usr/share/alterator-service-chrony/config-backup/$(basename $config_file).$type"
    if [ -f "$backup_file" ]; then
        echo "Backup file $backup_file already exists, skipping backup."
    fi
    if [ -f "$config_file" ]; then
        mv -u "$config_file" "$backup_file" || retval=1
    else
        echo "File $config_file not found, skipping backup."
    fi

    return $retval
}

read_stdin()
{
    local input_json=
    local retval=0

    if [ -t 0 ]; then
        echo "No input from stdin"
        retval=1
    fi

    while read -r line; do
        input_json+="$line"
    done

    if [ -z "$input_json" ]; then
        echo "Empty input"
        retval=1
    fi

    echo "$input_json"
    return $retval
}

parse_json() {
    local json_struct="$1"
    local param_name="$2"
    local retval=0

    local param_value=
    param_value="$(echo "$json_struct" | jq -r ".$param_name")"
    if [ -z "$param_value" ]; then
        false
    else
        echo "$param_value"
    fi

    return 0
}

upper() {
    echo -n "$1" | tr '[:lower:]' '[:upper:]'
}

call_provision() {
    local retval=0
    local input_json=
    local ntp_values=()
    local local_subnets=()
    input_json="$(read_stdin)"
    
    echo -e "Data is received from stdin"
    
    backup_config /etc/chrony.conf "original" || retval=1

    keys=$(echo "$input_json" | jq -r 'keys[]')
    for key in $keys; do
        case "$key" in
            #defaultPoll)
            #    dP_value="$(parse_json "$input_json" "$key")"
            #    if [ -n "$dP_value" ] && [ "$dP_value" != "null" ] && [ "$dP_value" = "true" ]; then
            #        echo -e "\npool pool.ntp.org iburst" >> /etc/chrony.conf || retval=1
            #        echo -e "Default pool of NTP servers is added: pool.ntp.org\n"
            #    fi  
            #    ;;
            makestep)
                ms_value="$(parse_json "$input_json" "$key")"
                if [ -n "$ms_value" ] && [ "$ms_value" != "null" ]; then
                    echo -e "\nmakestep ${ms_value}" >> /etc/chrony.conf || retval=1
                    echo -e "Makestep is set to ${ms_value}\n"
                fi
                ;;
            rtcSync)
                rtc_value="$(parse_json "$input_json" "$key")"
                if [ -n "$rtc_value" ] && [ "$rtc_value" ]
                then
                    echo -e "\nrtcsync" >> /etc/chrony.conf || retval=1
                    echo -e "RTC sync is set"
                fi
                ;;    
            *)
            
                false
                ;;
        esac
    done


    ntp_keys=$(echo "$input_json" | jq -r '.ntpServersSettings | keys[]?')
    for ntp_key in $ntp_keys; do
        case "$ntp_key" in
            serverDomainName)
                value="$(get_json_value "$input_json" "$ntp_key" ".ntpServersSettings")"
                if [[ "$value" =~ ^\[.*\]$ ]]; then
                    # Удаляем квадратные скобки и пробелы, разбиваем по запятой и переносу строки
                    echo -e "Adding servers:"
                    value_clean=$(echo "$value" | tr -d '[]' | tr ',\n' '\n' | sed '/^\s*$/d')
                    while read -r server; do
                        server=$(echo "$server" | xargs) # убираем пробелы по краям
                        if [ -n "$server" ]; then
                            echo -e "\nserver ${server} iburst" >> /etc/chrony.conf || retval=1
                            echo "${server}"
                        fi
                    done <<< "$value_clean"
                else
                    if [ -n "$value" ] && [ "$value" != "null" ]; then
                        echo -e "\nserver ${value} iburst" >> /etc/chrony.conf || retval=1
                        echo "${value}"
                    fi
                fi
                #if [ -n "$value" ] && [ "$value" != "null" ]; then
                #    echo -e "\nserver ${value} iburst" >> /etc/chrony.conf || retval=1
                #    echo "${value}"
                #fi
                ;;
                poolDomainName)
                value="$(get_json_value "$input_json" "$ntp_key" ".ntpServersSettings")"
                if [[ "$value" =~ ^\[.*\]$ ]]; then
                    echo -e "Adding pools:"
                    value_clean=$(echo "$value" | tr -d '[]' | tr ',\n' '\n' | sed '/^\s*$/d')
                    while read -r pool; do
                        pool=$(echo "$pool" | xargs) # убираем пробелы по краям
                        if [ -n "$pool" ]; then
                            echo -e "\npool ${pool} iburst" >> /etc/chrony.conf || retval=1
                            echo "${pool}"
                        fi
                    done <<< "$value_clean"
                else
                    if [ -n "$value" ] && [ "$value" != "null" ]; then
                        echo -e "\npool ${value} iburst" >> /etc/chrony.conf || retval=1
                        echo "${value}"
                    fi
                fi
                ;;
            *)
                false
                ;;
        esac
    done
    
    subnet_keys=$(echo "$input_json" | jq -r '.clientsSettings | keys[]?')
    for subnet_key in $subnet_keys; do
        case "$subnet_key" in
            subnetIpAddresses)
                value="$(get_json_value "$input_json" "$subnet_key" ".clientsSettings")"
                if [[ "$value" =~ ^\[.*\]$ ]]; then
                    echo -e "Adding allowed subnets:"
                    value_clean=$(echo "$value" | tr -d '[]' | tr ',\n' '\n' | sed '/^\s*$/d')
                    while read -r subnet; do
                        subnet=$(echo "$subnet" | xargs)
                        if [ -n "$subnet" ]; then
                            echo -e "\nallow ${subnet}" >> /etc/chrony.conf || retval=1
                            echo "${subnet}"
                        fi
                    done <<< "$value_clean"
                else
                    if [ -n "$value" ] && [ "$value" != "null" ]; then
                        echo -e "\nallow ${value}" >> /etc/chrony.conf || retval=1
                        echo "${value}"
                    fi
                fi
                ;;
            localStratum)
                value="$(get_json_value "$input_json" "$subnet_key" ".clientsSettings")"
                if [ -n "$value" ] && [ "$value" != "null" ]; then
                    echo -e "\nlocal stratum ${value}" >> /etc/chrony.conf || retval=1
                    echo -e "Local stratum is set to ${value}\n"
                fi
                ;;
            *)
                false
                ;;
        esac
    done

    echo -e "\ndriftfile /var/lib/chrony/drift" >> /etc/chrony.conf || retval=1
    echo -e "\nlogdir /var/log/chrony" >> /etc/chrony.conf || retval=1
    echo -e "\nntsdumpdir /var/lib/chrony" >> /etc/chrony.conf || retval=1

    echo -e "Default directories are set:\nlogdir: /var/log/chrony\ndriftfile: /var/lib/chrony/drift\nntsdumpdir: /var/lib/chrony\n"

    echo "$input_json" > /usr/share/alterator-service-chrony/deployment-config.json || retval=1
    
    if [ $retval -eq 0 ]; then
        # Add NTP servers from ntp_values array
        #if [ "${#ntp_values[@]}" -gt 0 ]; then
        #    for value in "${ntp_values[@]}"; do
        #        if [ -n "$value" ]; then
        #            echo -e "${value}" >> /etc/chrony.conf
        #            echo -e "Server is added: ${value}\n"
        #        fi
        #    done
        #fi
        ## Add allowed subnets from local_subnets array
        #if [ "${#local_subnets[@]}" -gt 0 ]; then
        #    for value in "${local_subnets[@]}"; do
        #        if [ -n "$value" ]; then
        #            echo -e "${value}" >> /etc/chrony.conf
        #            echo -e "Allowing access for subnet: ${value}\n"
        #        fi
        #    done
        #fi
        echo -e "Service is ready!"
    else
        echo -e "An error occurred while processing the input data."
        retval=1
    fi
    return $retval
}

call_start() {
    local retval=0
    systemctl enable --now chronyd.service || retval=1
    if [ $retval -eq 0 ]; then
        echo "Service chronyd started successfully."
    else
        echo "Failed to start service chronyd."
    fi

    return $retval
}

call_stop(){
    local retval=0
    systemctl disable --now  chronyd.service || retval=1
    return $retval
}

call_demote(){
    local retval=0
    local backup_dir="/usr/share/alterator-service-chrony/config-backup"
    echo "Demoting in progress..."
    backup_config /etc/chrony.conf "before_demote" 1 || retval=1
    echo "Creating backup of the current configuration file"
    
    rm -f /usr/share/alterator-service-chrony/deployment-config.json

    mv -f "$backup_dir/chrony.conf.original" /etc/chrony.conf

    chmod 644 /etc/chrony.conf
    echo "Restored original configuration file from backup."
    systemctl disable --now chrony
    
    if [ $retval -eq 0 ]; then
        echo "Service chronyd stopped successfully."
    else
        echo "Failed to stop service chronyd."
    fi


    return $retval
}

call_status() {
    local deployment_config_file="/usr/share/alterator-service-chrony/deployment-config.json"
    local conf="/etc/chrony.conf"
    local status_output=

    if [ ! -f "$deployment_config_file" ] || [ ! -f "$conf" ]; then
        exit 1
    fi

    status_output="$(cat "$deployment_config_file")"
    echo "$status_output"

    if systemctl is-active --quiet chrony.service; then
        exit 128
    else
        exit 127
    fi

}

call_backup(){
    echo "service is not bombom right now"
    return 0
}

call_restore(){
    echo "service is not bombom right now"
    return 0
}

call_configure(){
    echo "service is not bombom right now"
    return 0
}

case "$MODE" in
    provision)
        call_provision || GLOBAL_EXIT=1
        ;;
    demote)
        call_demote || GLOBAL_EXIT=1
        ;;
    status)
        call_status 
        ;;
    backup)
        call_backup || GLOBAL_EXIT=1
        ;;
    restore)
        call_restore || GLOBAL_EXIT=1
        ;;
    start)
        call_start || GLOBAL_EXIT=1
        ;;
    stop)
        call_stop || GLOBAL_EXIT=1
        ;;
    configure)
        call_configure || GLOBAL_EXIT=1
        ;;
esac

exit $GLOBAL_EXIT

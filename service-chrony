#!/usr/bin/env bash
# Samba active directory provision
# Tool for provision samba active directory
#
# Copyright (C) 2024 Evgenii Sozonov <arzdez@altlinux.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC2034
# shellcheck disable=SC1091
# shellcheck disable=SC2086
# shellcheck disable=SC2317
# shellcheck disable=SC3037

set -euo pipefail

. shell-getopt
. shell-ini-config


PROG_NAME="${0##*/}"
VERSION="0.1"
MODE="provision"
GLOBAL_EXIT=0
input_json=
entryfile=/usr/share/alterator/service/service-chrony.service

OPTIONS_LIST="help,
              version,
              undeploy,
              deploy,
              restore,
              backup,
              status,
              start,
              stop,
              configure"

OPTIONS_SHORT_LIST="h,v,u,d,b,r,s"

TEMP=$(getopt -n "$PROG_NAME" -o "$OPTIONS_SHORT_LIST" -l "$OPTIONS_LIST" -- "$@")
eval set -- "$TEMP"

while :; do
    case "$1" in
        -h|--help)
            show_usage
            ;;
        -v|--version)
            show_version
            ;;
        -u|--undeploy)
            MODE="undeploy"
            ;;
        -d|--deploy)
            MODE="deploy"
            ;;
        -r|--restore)
            MODE="restore"
            ;;
        -b|--backup)
            MODE="backup"
            ;;
        -s|--status)
            MODE="status"
            ;;
        --start)
            MODE="start"
            ;;
        --stop)
            MODE="stop"
            ;;
        --configure)
            MODE="configure"
            ;;
        --) shift; break
            ;;
        *) fatal "Unrecognized option: $1"
            ;;
    esac
    shift
done

validate_json(){
    local input_json="$1"
    local mode_value="$2"
    local retval=0
    local path_to_schema=
    path_to_schema="/usr/share/alterator-service-samba/samba-dc/$mode_value-parameters.schema.json"

    jsonschema "$path_to_schema" <<< $input_json &>/dev/null || retval=1

    return $retval
}

get_json_value() {
    local json="$1"
    local key="$2"
    local path="${3:-.}"
    echo "$json" | jq -r --arg k "$key" "$path.[\$k]" 2>/dev/null
}

backup_config() {
    local config_file="$1"
    local type="$2"
    local retval=0

    mkdir -p /usr/share/alterator-service-chrony/config-backup
    local backup_file=

    backup_file="/usr/share/alterator-service-chrony/config-backup/$(basename $config_file).$type"
    if [ -f "$backup_file" ]; then
        echo "Backup file $backup_file already exists, skipping backup."
    fi
    if [ -f "$config_file" ]; then
        cp -u "$config_file" "$backup_file" || retval=1
    else
        echo "File $config_file not found, skipping backup."
    fi

    return $retval
}

read_stdin()
{
    local input_json=
    local retval=0

    if [ -t 0 ]; then
        echo "No input from stdin"
        retval=1
    fi

    while read -r line; do
        input_json+="$line"
    done

    if [ -z "$input_json" ]; then
        echo "Empty input"
        retval=1
    fi

    echo "$input_json"
    return $retval
}

parse_json() {
    local json_struct="$1"
    local param_name="$2"
    local retval=0

    local param_value=
    param_value="$(echo "$json_struct" | jq -r ".$param_name")"
    if [ -z "$param_value" ]; then
        false
    else
        echo "$param_value"
    fi

    return 0
}

call_deploy() {
    local retval=0
    local input_json=
    local ntp_values=()
    local local_subnets=()
    local flag=0
    input_json="$(read_stdin)"
    
    echo -e "Data is received from stdin"
    
    backup_config /etc/chrony.conf "original" || retval=1
    
    echo "$input_json" > /usr/share/alterator-service-chrony/deployment-config.json || retval=1

    keys=$(echo "$input_json" | jq -r 'keys[]')
    for key in $keys; do
        case "$key" in
            disableDefaultPoll)
                dP_value="$(parse_json "$input_json" "$key")"
                if [ -n "$dP_value" ] && [ "$dP_value" != "null" ] && [ "$dP_value" = "true" ]; then
                    sed -i '/^pool pool\.ntp\.org/ s/^/#/' /etc/chrony.conf
                    echo -e "Default pool of NTP servers is disabled"
                    flag=1
                fi  
                ;;
            makestep)
                ms_value="$(parse_json "$input_json" "$key")"
                if [ -n "$ms_value" ] && [ "$ms_value" != "null" ]; then
                    sed -i "s/^makestep .*/makestep ${ms_value}/" /etc/chrony.conf 
                    echo -e "Makestep is set to ${ms_value}"
                fi
                ;;
            rtcSync)
                rtc_value="$(parse_json "$input_json" "$key")"
                if [ -n "$rtc_value" ] && [ "$rtc_value" = "false" ]
                then
                    sed -i '/^\s*rtcsync\s*$/d' /etc/chrony.conf
                    echo -e "RTC sync is canseled"
                else echo -e "RTC sync is set"
                fi
                ;;
            ntpServersSettings)
                ntp_array=$(echo "$input_json" | jq -c '.ntpServersSettings')
                if [ "$ntp_array" != "null" ]; then
                    echo "$ntp_array" | jq -c '.[]' | while read -r ntp_json; do
                        server_domain=$(echo "$ntp_json" | jq -r '.serverDomainName // empty')
                        bursts=$(echo "$ntp_json" | jq -r '.bursts // empty')
                        minpoll=$(echo "$ntp_json" | jq -r '.minpoll // empty')
                        maxpoll=$(echo "$ntp_json" | jq -r '.maxpoll // empty')
                        no_select=$(echo "$ntp_json" | jq -r '.noSelect // empty')
                        prefer=$(echo "$ntp_json" | jq -r '.prefer // empty')
                        offline=$(echo "$ntp_json" | jq -r '.offline // empty')
                        require=$(echo "$ntp_json" | jq -r '.require // empty')
                        trust=$(echo "$ntp_json" | jq -r '.trust // empty')

                        ntp_line="server"
                        [ -n "$server_domain" ] && ntp_line+=" $server_domain"
                        [ -n "$bursts" ] && ntp_line+=" $bursts"
                        [ -n "$minpoll" ] && ntp_line+=" minpoll $minpoll"
                        [ -n "$maxpoll" ] && ntp_line+=" maxpoll $maxpoll"
                        [ "$no_select" = "true" ] && ntp_line+=" noselect"
                        [ "$prefer" = "true" ] && ntp_line+=" prefer"
                        [ "$offline" = "offline" ] && ntp_line+=" offline"
                        [ "$offline" = "auto offline" ] && ntp_line+=" auto_offline"
                        [ "$require" = "true" ] && ntp_line+=" require"
                        [ "$trust" = "true" ] && ntp_line+=" trust"

                        sed -i "8i $ntp_line" /etc/chrony.conf || retval=1
                        echo "$ntp_line"
                    done
                fi
                ;;
            ntpPoolsSettings)
                ntp_array=$(echo "$input_json" | jq -c '.ntpPoolsSettings')
                if [ "$ntp_array" != "null" ]; then
                    echo "$ntp_array" | jq -c '.[]' | while read -r ntp_json; do
                        pool_domain=$(echo "$ntp_json" | jq -r '.poolDomainName // empty')
                        bursts=$(echo "$ntp_json" | jq -r '.bursts // empty')
                        minpoll=$(echo "$ntp_json" | jq -r '.minpoll // empty')
                        maxpoll=$(echo "$ntp_json" | jq -r '.maxpoll // empty')
                        no_select=$(echo "$ntp_json" | jq -r '.noSelect // empty')
                        prefer=$(echo "$ntp_json" | jq -r '.prefer // empty')
                        offline=$(echo "$ntp_json" | jq -r '.offline // empty')
                        require=$(echo "$ntp_json" | jq -r '.require // empty')
                        trust=$(echo "$ntp_json" | jq -r '.trust // empty')
                        maxsources=$(echo "$ntp_json" | jq -r '.maxsources // empty')

                        ntp_line="pool"
                        [ -n "$pool_domain" ] && ntp_line+=" $pool_domain"
                        [ -n "$bursts" ] && ntp_line+=" $bursts"
                        [ -n "$minpoll" ] && ntp_line+=" minpoll $minpoll"
                        [ -n "$maxpoll" ] && ntp_line+=" maxpoll $maxpoll"
                        [ "$no_select" = "true" ] && ntp_line+=" noselect"
                        [ "$prefer" = "true" ] && ntp_line+=" prefer"
                        [ "$offline" = "offline" ] && ntp_line+=" offline"
                        [ "$offline" = "auto offline" ] && ntp_line+=" auto_offline"
                        [ "$require" = "true" ] && ntp_line+=" require"
                        [ "$trust" = "true" ] && ntp_line+=" trust"
                        [ -n "$maxsources" ] && ntp_line+=" maxsources $maxsources"

                        sed -i "8i $ntp_line" /etc/chrony.conf || retval=1
                        echo "$ntp_line"
                    done
                fi
                ;;
            ntpDefaultPool)
                ntp_array=$(echo "$input_json" | jq -c '.ntpDefaultPool')
                echo "test test test"
                if [ "$ntp_array" != "null" ]; then
                    ntp_json="$ntp_array"
                    pool_domain=$(echo "$ntp_json" | jq -r '.poolDomainName // empty')
                    bursts=$(echo "$ntp_json" | jq -r '.bursts // empty')
                    minpoll=$(echo "$ntp_json" | jq -r '.minpoll // empty')
                    maxpoll=$(echo "$ntp_json" | jq -r '.maxpoll // empty')
                    no_select=$(echo "$ntp_json" | jq -r '.noSelect // empty')
                    prefer=$(echo "$ntp_json" | jq -r '.prefer // empty')
                    offline=$(echo "$ntp_json" | jq -r '.offline // empty')
                    require=$(echo "$ntp_json" | jq -r '.require // empty')
                    trust=$(echo "$ntp_json" | jq -r '.trust // empty')
                    maxsources=$(echo "$ntp_json" | jq -r '.maxsources // empty')

                    ntp_line="pool"
                    [ -n "$pool_domain" ] && ntp_line+=" $pool_domain"
                    [ -n "$bursts" ] && ntp_line+=" $bursts"
                    [ -n "$minpoll" ] && ntp_line+=" minpoll $minpoll"
                    [ -n "$maxpoll" ] && ntp_line+=" maxpoll $maxpoll"
                    [ "$no_select" = "true" ] && ntp_line+=" noselect"
                    [ "$prefer" = "true" ] && ntp_line+=" prefer"
                    [ "$offline" = "offline" ] && ntp_line+=" offline"
                    [ "$offline" = "auto offline" ] && ntp_line+=" auto_offline"
                    [ "$require" = "true" ] && ntp_line+=" require"
                    [ "$trust" = "true" ] && ntp_line+=" trust"
                    [ -n "$maxsources" ] && ntp_line+=" maxsources $maxsources"
                    
                    if [ $flag -eq 1 ]; then
                        sed -i "s|^\(#*\)pool pool\.ntp\.org iburst\$|#${ntp_line}|" /etc/chrony.conf || retval=1
                    else
                        sed -i "s|^\(#*\)pool pool\.ntp\.org iburst\$|\1$ntp_line|" /etc/chrony.conf || retval=1
                    fi
                    echo "$ntp_line"
                    
                fi
                ;;
            *)
            
                false
                ;;
        esac
    done

    echo "$input_json" > /usr/share/alterator-service-chrony/deployment-config.json || retval=1
    
    if [ $retval -eq 0 ]; then
        echo -e "Service is ready!"
    else
        echo -e "An error occurred while processing the input data."
        retval=1
    fi
    return $retval
}

call_start() {
    local retval=0
    systemctl enable --now chronyd.service || retval=1
    if [ $retval -eq 0 ]; then
        echo "Service chronyd started successfully."
    else
        echo "Failed to start service chronyd."
    fi

    return $retval
}

call_stop(){
    local retval=0
    systemctl disable --now  chronyd.service || retval=1
    if [ $retval -eq 0 ]; then
        echo "Service chronyd stoped successfully."
    else
        echo "Failed to stop service chronyd."
    fi

    return $retval
}

call_undeploy(){
    local retval=0
    local backup_dir="/usr/share/alterator-service-chrony/config-backup"
    echo "Demoting in progress..."
    backup_config /etc/chrony.conf "before_demote" 1 || retval=1
    echo "Creating backup of the current configuration file"
    
    rm -f /usr/share/alterator-service-chrony/deployment-config.json || retval=1

    mv -f "$backup_dir/chrony.conf.original" /etc/chrony.conf || retval=1

    chmod 644 /etc/chrony.conf
    echo "Restored original configuration file from backup."
    call_stop || retval=1
    
    if [ $retval -eq 0 ]; then
        echo "Service chronyd stopped successfully."
    else
        echo "Failed to stop service chronyd."
    fi


    return $retval
}

call_status() {
    local deployment_config_file="/usr/share/alterator-service-chrony/deployment-config.json"
    local conf="/etc/chrony.conf"
    local status_output=

    if [ ! -f "$deployment_config_file" ] || [ ! -f "$conf" ]; then
        exit 1
    fi

    status_output="$(cat "$deployment_config_file")"
    echo "$status_output"

    if systemctl is-active --quiet chrony.service; then
        exit 128
    else
        exit 127
    fi

}

call_backup(){
    echo "service is not bombom right now"
    return 0
}

call_restore(){
    echo "service is not bombom right now"
    return 0
}

call_configure(){
    echo "service is not bombom right now"
    return 0
}

case "$MODE" in
    deploy)
        call_deploy || GLOBAL_EXIT=1
        ;;
    undeploy)
        call_undeploy || GLOBAL_EXIT=1
        ;;
    status)
        call_status 
        ;;
    backup)
        call_backup || GLOBAL_EXIT=1
        ;;
    restore)
        call_restore || GLOBAL_EXIT=1
        ;;
    start)
        call_start || GLOBAL_EXIT=1
        ;;
    stop)
        call_stop || GLOBAL_EXIT=1
        ;;
    configure)
        call_configure || GLOBAL_EXIT=1
        ;;
esac

exit $GLOBAL_EXIT
